name: PR Comment

on:
  issue_comment:
    types: [created]

jobs:
  comment:
    if: github.event.issue.pull_request != null && github.event.comment.body == 'end of pr'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get list of changed and added files
        id: changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const changedFiles = files.filter(file => file.status !== 'added').map(file => `- ${file.filename}`).join('\n');
            const addedFiles = files.filter(file => file.status === 'added').map(file => `- ${file.filename}`).join('\n');

            core.setOutput('changedFiles', changedFiles);
            core.setOutput('addedFiles', addedFiles);

      - name: Comment on the pull request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedFiles = `${{ steps.changed-files.outputs.changedFiles }}`;
            const addedFiles = `${{ steps.changed-files.outputs.addedFiles }}`;

            let commentBody = `<!-- pr-comment-bot -->\n`;
            if (changedFiles) {
              commentBody += `The following files have been changed:\n${changedFiles}\n\n`;
            }
            if (addedFiles) {
              commentBody += `The following files have been added:\n${addedFiles}`;
            }

            // List comments on the pull request
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find and delete previous bot comments
            const botComments = comments.filter(comment => comment.body.startsWith('<!-- pr-comment-bot -->'));

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }

            // Create a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
