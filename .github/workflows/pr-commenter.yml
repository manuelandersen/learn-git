name: PR Comment

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get list of changed and added files
        id: changed-files
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Separate changed and added files
            const changedFiles = files.filter(file => file.status !== 'added');
            const addedFiles = files.filter(file => file.status === 'added');

            // Calculate total lines changed
            let totalLinesChanged = 0;
            for (const file of changedFiles) {
              totalLinesChanged += file.changes;
            }

            // Format the output
            let commentBody = `| Name                        | Lines  | Diff  | Tokens/Line | Diff |\n`;
            commentBody += `|-----------------------------|-------|-------|-------------|------|\n`;

            for (const file of changedFiles) {
              commentBody += `| ${file.filename.padEnd(28)} | ${file.changes.toString().padStart(5)} | ${file.changes > 0 ? '+' : '-'}${file.changes.toString().padStart(4)} | ${Math.round(file.additions / file.changes * 10) / 10} | ${file.deletions > 0 ? '-' : '+'}${Math.round(file.deletions / file.changes * 10) / 10} |\n`;
            }

            commentBody += `\nTotal lines changed: +${totalLinesChanged}`;

            core.setOutput('commentBody', commentBody);

      - name: Comment on the pull request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find and delete previous bot comments
            const botComments = comments.filter(comment => comment.body.startsWith('<!-- pr-comment-bot -->'));

            for (const comment of botComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }

            // Create a new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: core.getInput('commentBody')
            });
